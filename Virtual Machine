fs = require('fs');
const readline = require('readline-sync');
let arg = process.argv;
var mem = new Array()
/*
   Factorial
set $a 1
set $b 1
input $n
key startFac
mult $a $b $b
ifnotEqual $a $n
add $a 1 $a
goto startFac
fi
output $b
exit
*/
/*
Фибоначчи
set $a 0
set $b 1
set $c 0
set $counter 1
input $n
key startFib
add $b 0 $a
add $c 0 $b
add $a $b $c
add $counter 1 $counter
ifnotEqual $counter $n
goto startFib
fi
output $c
exit
*/

let text = fs.readFileSync('1.jss');
text = text.toString();
mem = text.split(/[ ,\n]/);
for (let i = 0; i < mem.length; i++) {
    console.log(i, mem[i]);
}
var variables = new Array();
var keys = new Array();
let ip = 0;
let flag = true;
let ifFlag = false;
while (flag) {
    if (ifFlag && mem[ip] != "fi\r") {
        ip += 1;
        continue
    }
    switch (mem[ip]) {

        case 'input':
            variables[mem[ip + 1].substring(0, mem[ip + 1].length - 1)] = parseFloat(readline.question("\nPrint input:\n"));
            ip += 2;
            break;
        case 'set':
            variables[mem[ip + 1]] = parseFloat(mem[ip + 2]);
            ip += 3;
            break;
        case 'output':
            console.log(variables[mem[ip + 1].substring(0, mem[ip + 1].length - 1)]);
            ip += 2;
            break
        case 'add':
            if (mem[ip + 1].startsWith('$')) {
                if (mem[ip + 2].startsWith('$')) {
                    variables[mem[ip + 3].substring(0, mem[ip + 3].length - 1)] = variables[mem[ip + 1]] + variables[mem[ip + 2]];
                } else {
                    variables[mem[ip + 3].substring(0, mem[ip + 3].length - 1)] = variables[mem[ip + 1]] + parseFloat(mem[ip + 2]);
                }
            } else {
                if (mem[ip + 2].startsWith('$')) {
                    variables[mem[ip + 3].substring(0, mem[ip + 3].length - 1)] = parseFloat(mem[ip + 1]) + variables[mem[ip + 2]];
                } else {
                    variables[mem[ip + 3].substring(0, mem[ip + 3].length - 1)] = parseFloat(mem[ip + 1]) + parseFloat(mem[ip + 2]);
                }
            }
            ip += 4;
            break;
        case 'abstract':
            if (mem[ip + 1].startsWith('$')) {
                if (mem[ip + 2].startsWith('$')) {
                    variables[mem[ip + 3].substring(0, mem[ip + 3].length - 1)] = variables[mem[ip + 1]] - variables[mem[ip + 2]];
                } else {
                    variables[mem[ip + 3].substring(0, mem[ip + 3].length - 1)] = variables[mem[ip + 1]] - parseFloat(mem[ip + 2]);
                }
            } else {
                if (mem[ip + 2].startsWith('$')) {
                    variables[mem[ip + 3].substring(0, mem[ip + 3].length - 1)] = parseFloat(mem[ip + 1]) - variables[mem[ip + 2]];
                } else {
                    variables[mem[ip + 3].substring(0, mem[ip + 3].length - 1)] = parseFloat(mem[ip + 1]) - parseFloat(mem[ip + 2]);
                }
            }
            ip += 4;
            break;
        case 'mult':
            if (mem[ip + 1].startsWith('$')) {
                if (mem[ip + 2].startsWith('$')) {
                    variables[mem[ip + 3].substring(0, mem[ip + 3].length - 1)] = variables[mem[ip + 1]] * variables[mem[ip + 2]];
                } else {
                    variables[mem[ip + 3].substring(0, mem[ip + 3].length - 1)] = variables[mem[ip + 1]] * mem[ip + 2];
                }
            } else {
                if (mem[ip + 2].startsWith('$')) {
                    variables[mem[ip + 3].substring(0, mem[ip + 3].length - 1)] = mem[ip + 1] * variables[mem[ip + 2]];
                } else {
                    variables[mem[ip + 3].substring(0, mem[ip + 3].length - 1)] = mem[ip + 1] * mem[ip + 2];
                }
            }
            ip += 4
            break
        case 'ifnotEqual':
            ifFlag = variables[mem[ip + 1]] == variables[mem[ip + 2].substring(0, mem[ip + 2].length - 1)];
            ip += 3;
            break;
        case 'fi\r':
            ifFlag = false;
            ip += 1;
            break;
        case 'key':
            keys[mem[ip + 1]] = ip + 2;
            ip += 2;
            break;
        case 'goto':
            ip = keys[mem[ip + 1]]
            break;
        case 'exit':
            flag = false;
    }
}

